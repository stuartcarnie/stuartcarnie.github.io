<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on stuartcarnie</title>
    <link>http://blog.stuartcarnie.com/categories/swift/</link>
    <description>Recent content in Swift on stuartcarnie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Mar 2016 18:44:23 +0000</lastBuildDate>
    <atom:link href="http://blog.stuartcarnie.com/categories/swift/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>C vs Swift: Reprise</title>
      <link>http://blog.stuartcarnie.com/post/swift/C-vs-Swift-reprise/</link>
      <pubDate>Sat, 12 Mar 2016 18:44:23 +0000</pubDate>
      
      <guid>http://blog.stuartcarnie.com/post/swift/C-vs-Swift-reprise/</guid>
      <description>

&lt;p&gt;I revisit a post by David Steuber, which benchmarked C and Swift generating a 2880x2880 pixel Mandelbrot with 4000 iterations per pixel. C killed Swift.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;https://www.david-steuber.com/2015/03/c-vs-swift-1-2-and-getting-killed/&#34;&gt;C vs Swift 1.2&lt;/a&gt;, David concludes&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The major take away on this is that Swift is not C or C++. For high performance computing, code has to be structured differently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;David acknowledges the Swift version is quite different from the C implemetation, which allocates an array &lt;em&gt;for each pixel&lt;/em&gt;. Worse still, this array grows dynamically as it iterates 4000 times, per pixel.&lt;/p&gt;

&lt;h3 id=&#34;baseline:dece97a280d65eb4c6d944231b7f062c&#34;&gt;Baseline&lt;/h3&gt;

&lt;p&gt;The C version will serve as our baseline. Using &lt;code&gt;-Ofast&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; it completed in about 20.5 seconds.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;orbitals  20.50s user 0.03s system 99% cpu 20.541 total
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;swift:dece97a280d65eb4c6d944231b7f062c&#34;&gt;Swift&lt;/h3&gt;

&lt;p&gt;I restructured the Swift code so it was semantically equivalent to the C implementation, meaning that it used fixed arrays and a single core. Using the default compiler optimizations, it completed in just under 43 seconds.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;orbitals-swift  42.67s user 0.12s system 100% cpu 42.768 total
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enabling &lt;code&gt;-whole-module-optimization&lt;/code&gt; dropped the runtime to 37.5 seconds. Adding &lt;code&gt;-Ounchecked&lt;/code&gt; reduced it a further 9 seconds to complete in 28.5 seconds.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;orbitals-swift  28.35s user 0.11s system 100% cpu 28.446 total
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td class=&#34;icon&#34;&gt;
            &lt;i class=&#34;fa icon-note&#34; title=&#34;&#34;&gt;&lt;/i&gt;
        &lt;/td&gt;
        &lt;td class=&#34;admonitionblock-content&#34;&gt;
            
Swift 2.2 was used for this post

        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;b id=&#34;fn:1&#34;&gt;1&lt;/b&gt; &lt;code&gt;-flto&lt;/code&gt; hurt performance, hence limiting to the &lt;code&gt;-Ofast&lt;/code&gt; option &lt;a href=&#34;#fnref:1&#34;&gt;â†©&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>