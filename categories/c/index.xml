<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on stuartcarnie</title>
    <link>http://spencerlyon2.github.io/hugo_gh_blog/categories/c/</link>
    <description>Recent content in C on stuartcarnie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Dec 2011 01:33:00 +0000</lastBuildDate>
    <atom:link href="http://spencerlyon2.github.io/hugo_gh_blog/categories/c/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Constant Confusion</title>
      <link>http://spencerlyon2.github.io/hugo_gh_blog/post/constant-confusion/</link>
      <pubDate>Sat, 03 Dec 2011 01:33:00 +0000</pubDate>
      
      <guid>http://spencerlyon2.github.io/hugo_gh_blog/post/constant-confusion/</guid>
      <description>

&lt;p&gt;The &lt;em&gt;const&lt;/em&gt; keyword in C can be confusing, so I wanted to put down my thoughts for my own benefit and for those looking for some clarity. In summary, I&amp;rsquo;m going to advocate you place &lt;em&gt;const&lt;/em&gt; to the right, and read the declaration from right to left.&lt;/p&gt;

&lt;h2 id=&#34;what-is-const:2beb528fa7b4af1d9ea70da77a222d33&#34;&gt;What is &lt;em&gt;const&lt;/em&gt;?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;const&lt;/em&gt; is a hint to the C compiler and programmer that a specific declaration or element of a declaration is immutable.  It is more complicated in C++, which is outside the scope of this post.  Lets start with a simple example, and the most common form where &lt;em&gt;const&lt;/em&gt; is written first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;const int i = 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The previous statement simply instructs the compiler that &lt;em&gt;i&lt;/em&gt; cannot be changed after its initial declaration, such that the following assignment would result in an error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;const int i = 5;
i = 6; // error: read-only variable is not assignable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If spoken from right to left, the declaration of &lt;em&gt;i&lt;/em&gt; would read “&lt;em&gt;i&lt;/em&gt; is an integer constant”, which is reasonable enough.  This syntax is still supported for historical reasons.  The alternative and &lt;em&gt;correct&lt;/em&gt; format is to write &lt;em&gt;const&lt;/em&gt; after the type reference, as follows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int const i = 5;
i = 6; // error: read-only variable is not assignable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which means the same thing; the value of &lt;em&gt;i&lt;/em&gt; must remain constant within its declared scope.  If you read this declaration from right to left, it is spoken as “&lt;em&gt;i&lt;/em&gt; is a constant integer”; much better.&lt;/p&gt;

&lt;p&gt;Yet another common definition is an array of constant characters or also known in some circles as an immutable string&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;const char * myString = &amp;quot;hello World&amp;quot;;
myString[0] = &#39;H&#39;;        // error: read-only variable is not assignable
myString = &amp;quot;Hello World&amp;quot;; // ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Spoken from right to left, “&lt;em&gt;myString&lt;/em&gt; is a pointer to character constant”, which doesn&amp;rsquo;t read so well.  Switching the &lt;em&gt;const&lt;/em&gt; keyword, we get the following&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char const * myString = &amp;quot;hello World&amp;quot;;
myString[0] = &#39;H&#39;;        // error: read-only variable is not assignable
myString = &amp;quot;Hello World&amp;quot;; // ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;read aloud, it is “&lt;em&gt;myString&lt;/em&gt; is a pointer to constant characters“; sounds better than the former.&lt;/p&gt;

&lt;p&gt;So far &lt;em&gt;const&lt;/em&gt; seems pretty straight forward, and perhaps at this point you&amp;rsquo;re thinking where is the confusion?.  Lets complicate things…  As we&amp;rsquo;ve demonstrated, the &lt;em&gt;const&lt;/em&gt; keyword can be placed before or after the type reference in a declaration, which for the previous scenarios is fine.  Let&amp;rsquo;s show a few more examples with pointers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int * const i;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Declares &lt;em&gt;i&lt;/em&gt; as constant pointer to an integer.  Again, reading from right to left makes it pretty clear what we&amp;rsquo;re dealing with.  The following shows both legal and illegal usages of &lt;em&gt;i&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int j = 5, k = 6;
int * const i = &amp;amp;j; // points to the memory referred to by j
i = &amp;amp;k;             // error: read-only variable is not assignable
*i = 6;             // ok, modifies the value of j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, because the &lt;em&gt;const&lt;/em&gt; keyword can be placed before or after the type reference, as shown earlier, the following declarations of &lt;em&gt;h&lt;/em&gt; and &lt;em&gt;i&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int j = 5, k = 6;
const int * const h = &amp;amp;j;
int const * const i = &amp;amp;j;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;result in a variable that is a constant pointer to a constant integer.  Given that, the following lines will result in compiler errors:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;*h = 5; // error: read-only variable is not assignable
h = &amp;amp;k; // error: read-only variable is not assignable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Want to see something confusing? The following 3 lines are identical, and will compile with current versions of clang and gcc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;const int const g = 5;
const int h = 6;
int const i = 7;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s not horrible, but lets reintroduce pointers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;const int const * i;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is this? If you had not just read all the above, one would be forgiven for thinking &lt;em&gt;i&lt;/em&gt; is a constant pointer to a constant integer, but in fact both instances of &lt;em&gt;const&lt;/em&gt; refer to the int type; this is a pointer to a constant integer. The correct definition, as we saw earlier is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;const int * const i; // or preferably
int const * const i;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Worse still is multiple levels of indirection, such as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int * * i;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which when read from right to left declares “&lt;em&gt;i&lt;/em&gt; is a pointer to a pointer of integers”. A more complicated example using the &lt;em&gt;const&lt;/em&gt; keyword&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int const * const * const i;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or “&lt;em&gt;i&lt;/em&gt; is a constant pointer to a constant pointer of constant integers.  &lt;em&gt;Wow&lt;/em&gt;.  All levels of indirection are immutable, so it can only be assigned at its declaration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int j[2][3] = { {1, 2, 3}, {4, 5, 6} };
int const * const * const i = &amp;amp;j; // ok
i = NULL;     // error
i[0] = &amp;amp;j[0]; // error
i[0][0] = 5;  // error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s an extreme case, but becomes evident why writing &lt;em&gt;const&lt;/em&gt; to the right is a good habit.  The following declaration of &lt;em&gt;i&lt;/em&gt; may look the same to the untrained eye:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int j[2][3] = { {1, 2, 3}, {4, 5, 6} };
const int const * const * i = &amp;amp;j; // ok
i = NULL;     // ok!!
i[0] = &amp;amp;j[0]; // error
i[0][0] = 5;  // error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;however, armed with this knowledge, you (and the compiler) say otherwise.&lt;/p&gt;

&lt;p&gt;After all this, you may be asking when might I use the declaration &lt;em&gt;type const * const&lt;/em&gt;?  When possible, I prefer to be explicit, and strings used as constants across compilation units are often declared as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char const * kMyConstant = &amp;quot;Hello World&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then referred to in a separate object file as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;extern char const * kMyConstant;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whilst modifying the contents of &lt;em&gt;kMyConstant&lt;/em&gt; is prohibited, assigning the pointer &lt;em&gt;kMyConstant&lt;/em&gt; to a new location is possible, as follows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;extern char const * kMyConstant;
void fn() {
    kMyConstant[0] = &#39;h&#39;; // error
    kMyConstant = &amp;quot;Hi!&amp;quot;;  // now says &amp;quot;Hi!&amp;quot; instead of &amp;quot;Hello World&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clearly for the majority of situations, this is not what the developer intended.  Changing the declaration to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char const * const kMyConstant = &amp;quot;Hello World&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would also prevent the pointer &lt;em&gt;kMyConstant&lt;/em&gt; from being overwritten.&lt;/p&gt;

&lt;h2 id=&#34;in-summary:2beb528fa7b4af1d9ea70da77a222d33&#34;&gt;In summary&lt;/h2&gt;

&lt;p&gt;Always write &lt;em&gt;const&lt;/em&gt; to the right and read the declaration from right to left.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>